local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")
local HttpService = game:GetService("HttpService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local rodNames = {}
local rodsFolder = ReplicatedStorage:WaitForChild("resources"):WaitForChild("items"):WaitForChild("rods")
for _, rod in ipairs(rodsFolder:GetChildren()) do
    table.insert(rodNames, rod.Name)
end

local tpFolder = workspace:WaitForChild("world"):WaitForChild("spawns"):WaitForChild("TpSpots")

local tpNames = {}
for _, spot in ipairs(tpFolder:GetChildren()) do
    table.insert(tpNames, spot.Name)
end

table.sort(tpNames, function(a, b) return a:lower() < b:lower() end)

local SETTINGS_FILE = "Fischsv.json"

local Settings = {
    AutoCast = false,
    AutoReel = false,
    AutoEquipRod = false,
    AutoShake = false,
    AutoSell = false,
    TpToIsland = false,
    SelectedIsland = nil,
    SavedPosition = nil,
    CatchMethod = "Perfect",
    ReelMethod = "Instant",
    WalkOnWater = false
}

if pcall(function() return readfile(SETTINGS_FILE) end) then
    local success, data = pcall(function()
        return HttpService:JSONDecode(readfile(SETTINGS_FILE))
    end)
    if success and data then
        for k, v in pairs(data) do Settings[k] = v end
    end
end

local savedPosition = nil
if Settings.SavedPosition then
    local sp = Settings.SavedPosition
    if sp.X and sp.Y and sp.Z and sp.Yaw then
        local pos = Vector3.new(sp.X, sp.Y, sp.Z)
        local yawRad = math.rad(sp.Yaw)
        savedPosition = CFrame.new(pos) * CFrame.Angles(0, yawRad, 0)
    end
end

local function SaveSettings()
    pcall(function()
        local dataToSave = {}
        for k, v in pairs(Settings) do
            dataToSave[k] = v
        end
        if savedPosition then
            local pos = savedPosition.Position
            local _, yRot, _ = savedPosition:ToEulerAnglesXYZ()
            dataToSave.SavedPosition = {
                X = pos.X,
                Y = pos.Y,
                Z = pos.Z,
                Yaw = math.deg(yRot)
            }
        else
            dataToSave.SavedPosition = nil
        end
        writefile(SETTINGS_FILE, HttpService:JSONEncode(dataToSave))
    end)
end

local autocast = Settings.AutoCast
local autoreel = Settings.AutoReel
local autoEquipRodEnabled = Settings.AutoEquipRod
local CatchMethod = Settings.CatchMethod
local autoshake = Settings.AutoShake
local autosell = Settings.AutoSell
local teleporting = Settings.TpToIsland
local selectedIsland = Settings.SelectedIsland
local reelMethod = Settings.ReelMethod
local walkOnWaterEnabled = Settings.WalkOnWater
local walkspeedValue = 16
local jumppowerValue = 50
local noclipEnabled = false
local infinityJumpEnabled = false
local changePlayerEnabled = false
local selectedPlayer = nil
local tpToPlayerEnabled = false
local autoEquipRod_running = false
local autocast_running = false
local autoreel_running = false
local autoshake_running = false
local autosell_running = false
local teleport_running = false

local function EquipRods()
    local char = player.Character or player.CharacterAdded:Wait()
    local backpack = player:WaitForChild("Backpack")

    local hasRodInHand = false
    for _, tool in ipairs(char:GetChildren()) do
        if tool:IsA("Tool") and table.find(rodNames, tool.Name) then
            hasRodInHand = true
            break
        end
    end

    if hasRodInHand then return end

    for _, rodName in ipairs(rodNames) do
        for _, tool in ipairs(backpack:GetChildren()) do
            if tool:IsA("Tool") and tool.Name == rodName then
                tool.Parent = char
                return
            end
        end
    end
end

local function GetPlayerNames()
    local names = {}
    for _, plr in ipairs(Players:GetPlayers()) do
        table.insert(names, plr.Name)
    end
    table.sort(names, function(a, b) return a:lower() < b:lower() end)
    return names
end

local function GetHumanoidRootPart()
    local char = player.Character or player.CharacterAdded:Wait()
    return char:WaitForChild("HumanoidRootPart")
end

local function StartAutoEquipRod()
    if autoEquipRod_running then return end
    autoEquipRod_running = true
    task.spawn(function()
        while autoEquipRodEnabled do
            EquipRods()
            task.wait(0.1)
        end
        autoEquipRod_running = false
    end)
end

local function StartAutoCastThrow()
    if autocast_running then return end
    autocast_running = true
    task.spawn(function()
        while autocast do
            local char = player.Character
            local rod = nil
            for _, tool in ipairs(char:GetChildren()) do
                if tool:IsA("Tool") and table.find(rodNames, tool.Name) then 
                    rod = tool 
                    break 
                end
            end
            if rod then
                local cast = rod:FindFirstChild("events") and rod.events:FindFirstChild("cast")
                if cast then 
                    pcall(function() cast:FireServer(100, true) end) 
                end
            end
            task.wait(0.3)
        end
        autocast_running = false
    end)
end

local function StartAutoCastTeleport()
    if teleport_running then return end
    teleport_running = true
    task.spawn(function()
        while autocast do
            local hrp = GetHumanoidRootPart()
            if hrp and savedPosition then
                pcall(function()
                    hrp.CFrame = savedPosition
                end)
            end
            task.wait(0.5)
        end
        teleport_running = false
    end)
end

local function StartAutoReel()
    if autoreel_running then return end
    autoreel_running = true
    task.spawn(function()
        while autoreel do
            local gui = player:FindFirstChild("PlayerGui")
            local reel = gui and gui:FindFirstChild("reel")

            while autoreel and gui and not reel do
                reel = gui:FindFirstChild("reel")
                task.wait(0.1)
            end

            if reel then
                local char = player.Character
                if char then
                    for _, rodName in ipairs(rodNames) do
                        local rod = char:FindFirstChild(rodName)
                        if rod then
                            local resetEvent = rod:FindFirstChild("events") and rod.events:FindFirstChild("reset")
                            if resetEvent then
                                while autoreel and reel and reel.Parent and rod.Parent == char do
                                    pcall(function() resetEvent:FireServer() end)

                                    local bar = reel:FindFirstChild("bar")
                                    local fish = bar and bar:FindFirstChild("fish")
                                    local playerbar = bar and bar:FindFirstChild("playerbar")

                                    pcall(function()
                                        if reelMethod == "Legit" then
                                            if fish and playerbar then
                                                playerbar.Position = fish.Position
                                            end
                                        elseif reelMethod == "Instant" then
                                            local isPerfect
                                            if CatchMethod == "Perfect" then
                                                isPerfect = true
                                            elseif CatchMethod == "Random" then
                                                isPerfect = (math.random(0, 1) == 1)
                                            else
                                                isPerfect = true
                                            end
                                            game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished"):FireServer(100, isPerfect)
                                        end
                                    end)

                                    task.wait(0.05)
                                    reel = gui:FindFirstChild("reel")
                                end

                                if rod.Parent ~= player.Backpack then
                                    rod.Parent = player.Backpack
                                end
                            end
                        end
                    end
                end
            end

            task.wait(0.1)
        end
        autoreel_running = false
    end)
end

local function StartAutoShake()
    if autoshake_running then return end
    autoshake_running = true
    task.spawn(function()
        while autoshake do
            local shakeButton = player.PlayerGui:FindFirstChild("shakeui")
            shakeButton = shakeButton and shakeButton:FindFirstChild("safezone")
            shakeButton = shakeButton and shakeButton:FindFirstChild("button")
            shakeButton = shakeButton and shakeButton:FindFirstChild("shake")
            if shakeButton then pcall(function() shakeButton:FireServer() end) end
            task.wait(0.05)
        end
        autoshake_running = false
    end)
end

local function StartAutoSell()
    if autosell_running then return end
    autosell_running = true
    task.spawn(function()
        while autosell do
            local npcFolder = workspace:WaitForChild("world"):WaitForChild("npcs")
            local targetNpc = nil
            for _, npc in ipairs(npcFolder:GetChildren()) do
                if string.find(npc.Name, "Merchant") then targetNpc = npc break end
            end
            if targetNpc then
                local args = {{voice = 12, npc = targetNpc, idle = targetNpc:WaitForChild("description"):WaitForChild("idle")}}
                pcall(function() ReplicatedStorage:WaitForChild("events"):WaitForChild("SellAll"):InvokeServer(unpack(args)) end)
            end
            task.wait(1)
        end
        autosell_running = false
    end)
end

local function StartTeleport()
    if teleport_running then return end
    teleport_running = true
    task.spawn(function()
        while teleporting do
            local hrp = GetHumanoidRootPart()
            local spot = tpFolder:FindFirstChild(selectedIsland)
            if hrp and spot then
                pcall(function() hrp.CFrame = spot.CFrame + Vector3.new(0, 5, 0) end)
            end
            task.wait()
        end
        teleport_running = false
    end)
end

local function SetWalkOnWater(state)
    walkOnWaterEnabled = state
    Settings.WalkOnWater = state
    SaveSettings()

    local fishingZone = workspace:WaitForChild("zones"):WaitForChild("fishing")
    for _, part in ipairs(fishingZone:GetDescendants()) do
        if part:IsA("BasePart") then
            part.CanCollide = walkOnWaterEnabled
        end
    end
end

-- Allusive UI Setup
local Allusive = loadstring(game:HttpGet("https://raw.githubusercontent.com/MarchHubOnTopFr/Allusive-UI/main/Allusive.lua"))()

local Window = Allusive:CreateWindow({
    Name = "Fisch - x2zu v0.1 Beta",
    Keybind = Enum.KeyCode.LeftAlt,
    Logo = "rbxassetid://74493757521216"
})

Allusive:Notify({
    Title = "Fisch UI",
    Content = "Loaded! Thank you for using this script!",
    Duration = 5
})

local MainTab = Window:CreateTab({
    Name = "Main",
    Icon = "apple"
})

local FischSection = MainTab:CreateSection({
    Name = "Fisch Features",
    Position = "Left"
})

local SettingSection = MainTab:CreateSection({
    Name = "Setting Farm",
    Position = "Right"
})

local LocalPlayerTab = Window:CreateTab({
    Name = "Local Player",
    Icon = "user"
})

local PlayerSection = LocalPlayerTab:CreateSection({
    Name = "Local Player",
    Position = "Left"
})

local IslandsPlayerTab = Window:CreateTab({
    Name = "Islands & Player",
    Icon = "home"
})

local IslandSection = IslandsPlayerTab:CreateSection({
    Name = "Island",
    Position = "Left"
})

local PlayerTeleportSection = IslandsPlayerTab:CreateSection({
    Name = "Player",
    Position = "Right"
})

FischSection:CreateToggle({
    Name = "Auto Cast",
    Default = autocast,
    Callback = function(state)
        autocast = state
        Settings.AutoCast = state
        SaveSettings()
        if state then
            StartAutoCastThrow()
            StartAutoCastTeleport()
        end
    end
})

FischSection:CreateToggle({
    Name = "Auto Reel",
    Default = autoreel,
    Callback = function(state)
        autoreel = state
        Settings.AutoReel = state
        SaveSettings()
        if state then StartAutoReel() end
    end
})

FischSection:CreateToggle({
    Name = "Auto Equip Rod",
    Default = autoEquipRodEnabled,
    Callback = function(state)
        autoEquipRodEnabled = state
        Settings.AutoEquipRod = state
        SaveSettings()
        if state then StartAutoEquipRod() end
    end
})

FischSection:CreateToggle({
    Name = "Auto Shake",
    Default = autoshake,
    Callback = function(state)
        autoshake = state
        Settings.AutoShake = state
        SaveSettings()
        if state then StartAutoShake() end
    end
})

FischSection:CreateToggle({
    Name = "Auto Sell",
    Default = autosell,
    Callback = function(state)
        autosell = state
        Settings.AutoSell = state
        SaveSettings()
        if state then StartAutoSell() end
    end
})

SettingSection:CreateDropdown({
    Name = "Catch Method",
    Values = {"Perfect", "Random"},
    Default = CatchMethod or "Perfect",
    Callback = function(choice)
        CatchMethod = choice
        Settings.CatchMethod = choice
        SaveSettings()
    end
})

SettingSection:CreateDropdown({
    Name = "Reel Method",
    Values = {"Legit", "Instant"},
    Default = reelMethod or "Legit",
    Callback = function(choice)
        reelMethod = choice
        Settings.ReelMethod = choice
        SaveSettings()
        if autoreel then
            autoreel_running = false
            StartAutoReel()
        end
        if reelMethod == "Instant" then
            local isPerfect = (CatchMethod == "Perfect") or (CatchMethod == "Random" and math.random(0, 1) == 1)
            pcall(function()
                game:GetService("ReplicatedStorage"):WaitForChild("events"):WaitForChild("reelfinished"):FireServer(100, isPerfect)
            end)
        end
    end
})

SettingSection:CreateButton({
    Name = "Save Position",
    Callback = function()
        local hrp = GetHumanoidRootPart()
        if hrp then
            savedPosition = hrp.CFrame
            local pos = savedPosition.Position
            local _, yRot, _ = savedPosition:ToEulerAnglesXYZ()
            Settings.SavedPosition = {
                X = pos.X,
                Y = pos.Y,
                Z = pos.Z,
                Yaw = math.deg(yRot)
            }
            SaveSettings()
            Allusive:Notify({
                Title = "Position Saved",
                Content = "Current position has been saved!",
                Duration = 3
            })
        end
    end
})

PlayerSection:CreateSlider({
    Name = "Walkspeed",
    Min = 50,
    Max = 500,
    Default = 100,
    Callback = function(value)
        walkspeedValue = value
    end
})

PlayerSection:CreateSlider({
    Name = "Jumppower",
    Min = 50,
    Max = 500,
    Default = 50,
    Callback = function(value)
        jumppowerValue = value
    end
})

PlayerSection:CreateToggle({
    Name = "Change Player",
    Default = false,
    Callback = function(state)
        changePlayerEnabled = state
    end
})

PlayerSection:CreateToggle({
    Name = "Noclip",
    Default = false,
    Callback = function(state)
        noclipEnabled = state
    end
})

PlayerSection:CreateToggle({
    Name = "Infinity Jump",
    Default = false,
    Callback = function(state)
        infinityJumpEnabled = state
    end
})

PlayerSection:CreateToggle({
    Name = "Walk on Water",
    Default = walkOnWaterEnabled,
    Callback = function(state)
        SetWalkOnWater(state)
    end
})

PlayerSection:CreateButton({
    Name = "Fly",
    Callback = function()
        loadstring(game:HttpGet("https://raw.githubusercontent.com/XNEOFF/FlyGuiV3/main/FlyGuiV3.txt"))()
    end
})

IslandSection:CreateDropdown({
    Name = "Select Islands",
    Values = tpNames,
    Default = selectedIsland or tpNames[1],
    Callback = function(choice)
        selectedIsland = choice
        Settings.SelectedIsland = choice
        SaveSettings()
    end
})

IslandSection:CreateToggle({
    Name = "Tp to Island",
    Default = teleporting,
    Callback = function(state)
        teleporting = state
        Settings.TpToIsland = state
        SaveSettings()
        if teleporting then StartTeleport() end
    end
})

PlayerTeleportSection:CreateDropdown({
    Name = "Select Player",
    Values = GetPlayerNames(),
    Default = selectedPlayer or Players.LocalPlayer.Name,
    Callback = function(choice)
        selectedPlayer = choice
    end
})

PlayerTeleportSection:CreateToggle({
    Name = "Tp to Player",
    Default = tpToPlayerEnabled,
    Callback = function(state)
        tpToPlayerEnabled = state
        if tpToPlayerEnabled then
            task.spawn(function()
                while tpToPlayerEnabled do
                    local hrp = GetHumanoidRootPart()
                    local targetPlayer = Players:FindFirstChild(selectedPlayer)
                    if hrp and targetPlayer and targetPlayer.Character then
                        local targetHRP = targetPlayer.Character:FindFirstChild("HumanoidRootPart")
                        if targetHRP then
                            pcall(function()
                                hrp.CFrame = targetHRP.CFrame + Vector3.new(0, 0, 0)
                            end)
                        end
                    end
                    task.wait()
                end
            end)
        end
    end
})

Players.PlayerAdded:Connect(function()
    PlayerTeleportSection:UpdateDropdown("Select Player", GetPlayerNames())
end)

Players.PlayerRemoving:Connect(function()
    PlayerTeleportSection:UpdateDropdown("Select Player", GetPlayerNames())
end)

task.spawn(function()
    while true do
        task.wait(0.1)
        local char = player.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                if changePlayerEnabled then
                    humanoid.WalkSpeed = walkspeedValue
                    humanoid.JumpPower = jumppowerValue
                end
            end
            if noclipEnabled then
                for _, part in ipairs(char:GetChildren()) do
                    if part:IsA("BasePart") then
                        part.CanCollide = false
                    end
                end
            end
        end
    end
end)

UserInputService.JumpRequest:Connect(function()
    if infinityJumpEnabled then
        local char = player.Character
        if char then
            local humanoid = char:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
            end
        end
    end
end)

if autocast then
    StartAutoCastThrow()
    StartAutoCastTeleport()
end

if autoreel then
    StartAutoReel()
end

if autoshake then
    StartAutoShake()
end

if autosell then
    StartAutoSell()
end

if teleporting then
    StartTeleport()
end

if walkOnWaterEnabled then
    SetWalkOnWater(true)
end

if autoEquipRodEnabled then
    StartAutoEquipRod()
end
